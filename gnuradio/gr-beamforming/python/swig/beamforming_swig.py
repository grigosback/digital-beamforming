# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _beamforming_swig
else:
    import _beamforming_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _beamforming_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _beamforming_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _beamforming_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _beamforming_swig.high_res_timer_epoch()
class beamformer(object):
    r"""Proxy of C++ gr::beamforming::beamformer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mx: "unsigned int", my: "unsigned int", idx: "unsigned int") -> "gr::beamforming::beamformer::sptr":
        r"""make(unsigned int mx, unsigned int my, unsigned int idx) -> beamformer_sptr"""
        return _beamforming_swig.beamformer_make(mx, my, idx)
    __swig_destroy__ = _beamforming_swig.delete_beamformer

# Register beamformer in _beamforming_swig:
_beamforming_swig.beamformer_swigregister(beamformer)

def beamformer_make(mx: "unsigned int", my: "unsigned int", idx: "unsigned int") -> "gr::beamforming::beamformer::sptr":
    r"""beamformer_make(unsigned int mx, unsigned int my, unsigned int idx) -> beamformer_sptr"""
    return _beamforming_swig.beamformer_make(mx, my, idx)

class beamformer_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::beamforming::beamformer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(beamformer_sptr self) -> beamformer_sptr
        __init__(beamformer_sptr self, beamformer p) -> beamformer_sptr
        """
        _beamforming_swig.beamformer_sptr_swiginit(self, _beamforming_swig.new_beamformer_sptr(*args))

    def __deref__(self) -> "gr::beamforming::beamformer *":
        r"""__deref__(beamformer_sptr self) -> beamformer"""
        return _beamforming_swig.beamformer_sptr___deref__(self)
    __swig_destroy__ = _beamforming_swig.delete_beamformer_sptr

    def make(self, mx: "unsigned int", my: "unsigned int", idx: "unsigned int") -> "gr::beamforming::beamformer::sptr":
        r"""make(beamformer_sptr self, unsigned int mx, unsigned int my, unsigned int idx) -> beamformer_sptr"""
        return _beamforming_swig.beamformer_sptr_make(self, mx, my, idx)

    def history(self) -> "unsigned int":
        r"""history(beamformer_sptr self) -> unsigned int"""
        return _beamforming_swig.beamformer_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(beamformer_sptr self, int which, int delay)
        declare_sample_delay(beamformer_sptr self, unsigned int delay)
        """
        return _beamforming_swig.beamformer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(beamformer_sptr self, int which) -> unsigned int"""
        return _beamforming_swig.beamformer_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(beamformer_sptr self, int multiple)"""
        return _beamforming_swig.beamformer_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(beamformer_sptr self) -> int"""
        return _beamforming_swig.beamformer_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(beamformer_sptr self) -> double"""
        return _beamforming_swig.beamformer_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(beamformer_sptr self) -> uint64_t"""
        return _beamforming_swig.beamformer_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(beamformer_sptr self) -> uint64_t"""
        return _beamforming_swig.beamformer_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(beamformer_sptr self) -> bool"""
        return _beamforming_swig.beamformer_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(beamformer_sptr self) -> bool"""
        return _beamforming_swig.beamformer_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(beamformer_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamforming_swig.beamformer_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(beamformer_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamforming_swig.beamformer_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(beamformer_sptr self, std::string level)"""
        return _beamforming_swig.beamformer_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(beamformer_sptr self) -> std::string"""
        return _beamforming_swig.beamformer_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(beamformer_sptr self) -> int"""
        return _beamforming_swig.beamformer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(beamformer_sptr self, int m)"""
        return _beamforming_swig.beamformer_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(beamformer_sptr self)"""
        return _beamforming_swig.beamformer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(beamformer_sptr self) -> bool"""
        return _beamforming_swig.beamformer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(beamformer_sptr self, int m)"""
        return _beamforming_swig.beamformer_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(beamformer_sptr self) -> int"""
        return _beamforming_swig.beamformer_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(beamformer_sptr self, int i) -> long"""
        return _beamforming_swig.beamformer_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(beamformer_sptr self, long max_output_buffer)
        set_max_output_buffer(beamformer_sptr self, int port, long max_output_buffer)
        """
        return _beamforming_swig.beamformer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(beamformer_sptr self, int i) -> long"""
        return _beamforming_swig.beamformer_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(beamformer_sptr self, long min_output_buffer)
        set_min_output_buffer(beamformer_sptr self, int port, long min_output_buffer)
        """
        return _beamforming_swig.beamformer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(beamformer_sptr self, int which) -> float
        pc_input_buffers_full(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(beamformer_sptr self, int which) -> float
        pc_input_buffers_full_avg(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(beamformer_sptr self, int which) -> float
        pc_input_buffers_full_var(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(beamformer_sptr self, int which) -> float
        pc_output_buffers_full(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(beamformer_sptr self, int which) -> float
        pc_output_buffers_full_avg(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(beamformer_sptr self, int which) -> float
        pc_output_buffers_full_var(beamformer_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.beamformer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(beamformer_sptr self) -> float"""
        return _beamforming_swig.beamformer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(beamformer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamforming_swig.beamformer_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(beamformer_sptr self)"""
        return _beamforming_swig.beamformer_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(beamformer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamforming_swig.beamformer_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(beamformer_sptr self) -> int"""
        return _beamforming_swig.beamformer_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(beamformer_sptr self) -> int"""
        return _beamforming_swig.beamformer_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(beamformer_sptr self, int priority) -> int"""
        return _beamforming_swig.beamformer_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(beamformer_sptr self) -> std::string"""
        return _beamforming_swig.beamformer_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(beamformer_sptr self) -> std::string"""
        return _beamforming_swig.beamformer_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(beamformer_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.beamformer_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(beamformer_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.beamformer_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(beamformer_sptr self) -> long"""
        return _beamforming_swig.beamformer_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(beamformer_sptr self) -> basic_block_sptr"""
        return _beamforming_swig.beamformer_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(beamformer_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamforming_swig.beamformer_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(beamformer_sptr self) -> std::string"""
        return _beamforming_swig.beamformer_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(beamformer_sptr self, std::string name)"""
        return _beamforming_swig.beamformer_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(beamformer_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _beamforming_swig.beamformer_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(beamformer_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.beamformer_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(beamformer_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.beamformer_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(beamformer_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _beamforming_swig.beamformer_sptr_message_subscribers(self, which_port)

# Register beamformer_sptr in _beamforming_swig:
_beamforming_swig.beamformer_sptr_swigregister(beamformer_sptr)


beamformer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
beamformer = beamformer.make;

class phasedarray(object):
    r"""Proxy of C++ gr::beamforming::phasedarray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mx: "unsigned int", my: "unsigned int", theta: "float", phi: "float", fc: "float", element_separation: "float", element_error: "float") -> "gr::beamforming::phasedarray::sptr":
        r"""make(unsigned int mx, unsigned int my, float theta, float phi, float fc, float element_separation, float element_error) -> phasedarray_sptr"""
        return _beamforming_swig.phasedarray_make(mx, my, theta, phi, fc, element_separation, element_error)

    def set_elevation(self, theta: "float") -> "void":
        r"""set_elevation(phasedarray self, float theta)"""
        return _beamforming_swig.phasedarray_set_elevation(self, theta)

    def set_azimuth(self, phi: "float") -> "void":
        r"""set_azimuth(phasedarray self, float phi)"""
        return _beamforming_swig.phasedarray_set_azimuth(self, phi)

    def set_element_error(self, element_error: "float") -> "void":
        r"""set_element_error(phasedarray self, float element_error)"""
        return _beamforming_swig.phasedarray_set_element_error(self, element_error)
    __swig_destroy__ = _beamforming_swig.delete_phasedarray

# Register phasedarray in _beamforming_swig:
_beamforming_swig.phasedarray_swigregister(phasedarray)

def phasedarray_make(mx: "unsigned int", my: "unsigned int", theta: "float", phi: "float", fc: "float", element_separation: "float", element_error: "float") -> "gr::beamforming::phasedarray::sptr":
    r"""phasedarray_make(unsigned int mx, unsigned int my, float theta, float phi, float fc, float element_separation, float element_error) -> phasedarray_sptr"""
    return _beamforming_swig.phasedarray_make(mx, my, theta, phi, fc, element_separation, element_error)

class phasedarray_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::beamforming::phasedarray > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(phasedarray_sptr self) -> phasedarray_sptr
        __init__(phasedarray_sptr self, phasedarray p) -> phasedarray_sptr
        """
        _beamforming_swig.phasedarray_sptr_swiginit(self, _beamforming_swig.new_phasedarray_sptr(*args))

    def __deref__(self) -> "gr::beamforming::phasedarray *":
        r"""__deref__(phasedarray_sptr self) -> phasedarray"""
        return _beamforming_swig.phasedarray_sptr___deref__(self)
    __swig_destroy__ = _beamforming_swig.delete_phasedarray_sptr

    def make(self, mx: "unsigned int", my: "unsigned int", theta: "float", phi: "float", fc: "float", element_separation: "float", element_error: "float") -> "gr::beamforming::phasedarray::sptr":
        r"""make(phasedarray_sptr self, unsigned int mx, unsigned int my, float theta, float phi, float fc, float element_separation, float element_error) -> phasedarray_sptr"""
        return _beamforming_swig.phasedarray_sptr_make(self, mx, my, theta, phi, fc, element_separation, element_error)

    def set_elevation(self, theta: "float") -> "void":
        r"""set_elevation(phasedarray_sptr self, float theta)"""
        return _beamforming_swig.phasedarray_sptr_set_elevation(self, theta)

    def set_azimuth(self, phi: "float") -> "void":
        r"""set_azimuth(phasedarray_sptr self, float phi)"""
        return _beamforming_swig.phasedarray_sptr_set_azimuth(self, phi)

    def set_element_error(self, element_error: "float") -> "void":
        r"""set_element_error(phasedarray_sptr self, float element_error)"""
        return _beamforming_swig.phasedarray_sptr_set_element_error(self, element_error)

    def history(self) -> "unsigned int":
        r"""history(phasedarray_sptr self) -> unsigned int"""
        return _beamforming_swig.phasedarray_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(phasedarray_sptr self, int which, int delay)
        declare_sample_delay(phasedarray_sptr self, unsigned int delay)
        """
        return _beamforming_swig.phasedarray_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(phasedarray_sptr self, int which) -> unsigned int"""
        return _beamforming_swig.phasedarray_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(phasedarray_sptr self, int multiple)"""
        return _beamforming_swig.phasedarray_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(phasedarray_sptr self) -> int"""
        return _beamforming_swig.phasedarray_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(phasedarray_sptr self) -> double"""
        return _beamforming_swig.phasedarray_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(phasedarray_sptr self) -> uint64_t"""
        return _beamforming_swig.phasedarray_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(phasedarray_sptr self) -> uint64_t"""
        return _beamforming_swig.phasedarray_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(phasedarray_sptr self) -> bool"""
        return _beamforming_swig.phasedarray_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(phasedarray_sptr self) -> bool"""
        return _beamforming_swig.phasedarray_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(phasedarray_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamforming_swig.phasedarray_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(phasedarray_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamforming_swig.phasedarray_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(phasedarray_sptr self, std::string level)"""
        return _beamforming_swig.phasedarray_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(phasedarray_sptr self) -> std::string"""
        return _beamforming_swig.phasedarray_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(phasedarray_sptr self) -> int"""
        return _beamforming_swig.phasedarray_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(phasedarray_sptr self, int m)"""
        return _beamforming_swig.phasedarray_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(phasedarray_sptr self)"""
        return _beamforming_swig.phasedarray_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(phasedarray_sptr self) -> bool"""
        return _beamforming_swig.phasedarray_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(phasedarray_sptr self, int m)"""
        return _beamforming_swig.phasedarray_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(phasedarray_sptr self) -> int"""
        return _beamforming_swig.phasedarray_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(phasedarray_sptr self, int i) -> long"""
        return _beamforming_swig.phasedarray_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(phasedarray_sptr self, long max_output_buffer)
        set_max_output_buffer(phasedarray_sptr self, int port, long max_output_buffer)
        """
        return _beamforming_swig.phasedarray_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(phasedarray_sptr self, int i) -> long"""
        return _beamforming_swig.phasedarray_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(phasedarray_sptr self, long min_output_buffer)
        set_min_output_buffer(phasedarray_sptr self, int port, long min_output_buffer)
        """
        return _beamforming_swig.phasedarray_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(phasedarray_sptr self, int which) -> float
        pc_input_buffers_full(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(phasedarray_sptr self, int which) -> float
        pc_input_buffers_full_avg(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(phasedarray_sptr self, int which) -> float
        pc_input_buffers_full_var(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(phasedarray_sptr self, int which) -> float
        pc_output_buffers_full(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(phasedarray_sptr self, int which) -> float
        pc_output_buffers_full_avg(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(phasedarray_sptr self, int which) -> float
        pc_output_buffers_full_var(phasedarray_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.phasedarray_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(phasedarray_sptr self) -> float"""
        return _beamforming_swig.phasedarray_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(phasedarray_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamforming_swig.phasedarray_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(phasedarray_sptr self)"""
        return _beamforming_swig.phasedarray_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(phasedarray_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamforming_swig.phasedarray_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(phasedarray_sptr self) -> int"""
        return _beamforming_swig.phasedarray_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(phasedarray_sptr self) -> int"""
        return _beamforming_swig.phasedarray_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(phasedarray_sptr self, int priority) -> int"""
        return _beamforming_swig.phasedarray_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(phasedarray_sptr self) -> std::string"""
        return _beamforming_swig.phasedarray_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(phasedarray_sptr self) -> std::string"""
        return _beamforming_swig.phasedarray_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(phasedarray_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.phasedarray_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(phasedarray_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.phasedarray_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(phasedarray_sptr self) -> long"""
        return _beamforming_swig.phasedarray_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(phasedarray_sptr self) -> basic_block_sptr"""
        return _beamforming_swig.phasedarray_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(phasedarray_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamforming_swig.phasedarray_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(phasedarray_sptr self) -> std::string"""
        return _beamforming_swig.phasedarray_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(phasedarray_sptr self, std::string name)"""
        return _beamforming_swig.phasedarray_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(phasedarray_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _beamforming_swig.phasedarray_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(phasedarray_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.phasedarray_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(phasedarray_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.phasedarray_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(phasedarray_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _beamforming_swig.phasedarray_sptr_message_subscribers(self, which_port)

# Register phasedarray_sptr in _beamforming_swig:
_beamforming_swig.phasedarray_sptr_swigregister(phasedarray_sptr)


phasedarray_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phasedarray = phasedarray.make;

class doaesprit(object):
    r"""Proxy of C++ gr::beamforming::doaesprit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mx: "unsigned int", my: "unsigned int", fc: "float", element_separation: "float", spa: "unsigned int") -> "gr::beamforming::doaesprit::sptr":
        r"""make(unsigned int mx, unsigned int my, float fc, float element_separation, unsigned int spa) -> doaesprit_sptr"""
        return _beamforming_swig.doaesprit_make(mx, my, fc, element_separation, spa)
    __swig_destroy__ = _beamforming_swig.delete_doaesprit

# Register doaesprit in _beamforming_swig:
_beamforming_swig.doaesprit_swigregister(doaesprit)

def doaesprit_make(mx: "unsigned int", my: "unsigned int", fc: "float", element_separation: "float", spa: "unsigned int") -> "gr::beamforming::doaesprit::sptr":
    r"""doaesprit_make(unsigned int mx, unsigned int my, float fc, float element_separation, unsigned int spa) -> doaesprit_sptr"""
    return _beamforming_swig.doaesprit_make(mx, my, fc, element_separation, spa)

class doaesprit_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::beamforming::doaesprit > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(doaesprit_sptr self) -> doaesprit_sptr
        __init__(doaesprit_sptr self, doaesprit p) -> doaesprit_sptr
        """
        _beamforming_swig.doaesprit_sptr_swiginit(self, _beamforming_swig.new_doaesprit_sptr(*args))

    def __deref__(self) -> "gr::beamforming::doaesprit *":
        r"""__deref__(doaesprit_sptr self) -> doaesprit"""
        return _beamforming_swig.doaesprit_sptr___deref__(self)
    __swig_destroy__ = _beamforming_swig.delete_doaesprit_sptr

    def make(self, mx: "unsigned int", my: "unsigned int", fc: "float", element_separation: "float", spa: "unsigned int") -> "gr::beamforming::doaesprit::sptr":
        r"""make(doaesprit_sptr self, unsigned int mx, unsigned int my, float fc, float element_separation, unsigned int spa) -> doaesprit_sptr"""
        return _beamforming_swig.doaesprit_sptr_make(self, mx, my, fc, element_separation, spa)

    def history(self) -> "unsigned int":
        r"""history(doaesprit_sptr self) -> unsigned int"""
        return _beamforming_swig.doaesprit_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(doaesprit_sptr self, int which, int delay)
        declare_sample_delay(doaesprit_sptr self, unsigned int delay)
        """
        return _beamforming_swig.doaesprit_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(doaesprit_sptr self, int which) -> unsigned int"""
        return _beamforming_swig.doaesprit_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(doaesprit_sptr self, int multiple)"""
        return _beamforming_swig.doaesprit_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(doaesprit_sptr self) -> int"""
        return _beamforming_swig.doaesprit_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(doaesprit_sptr self) -> double"""
        return _beamforming_swig.doaesprit_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(doaesprit_sptr self) -> uint64_t"""
        return _beamforming_swig.doaesprit_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(doaesprit_sptr self) -> uint64_t"""
        return _beamforming_swig.doaesprit_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(doaesprit_sptr self) -> bool"""
        return _beamforming_swig.doaesprit_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(doaesprit_sptr self) -> bool"""
        return _beamforming_swig.doaesprit_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(doaesprit_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamforming_swig.doaesprit_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(doaesprit_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamforming_swig.doaesprit_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(doaesprit_sptr self, std::string level)"""
        return _beamforming_swig.doaesprit_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(doaesprit_sptr self) -> std::string"""
        return _beamforming_swig.doaesprit_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(doaesprit_sptr self) -> int"""
        return _beamforming_swig.doaesprit_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(doaesprit_sptr self, int m)"""
        return _beamforming_swig.doaesprit_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(doaesprit_sptr self)"""
        return _beamforming_swig.doaesprit_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(doaesprit_sptr self) -> bool"""
        return _beamforming_swig.doaesprit_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(doaesprit_sptr self, int m)"""
        return _beamforming_swig.doaesprit_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(doaesprit_sptr self) -> int"""
        return _beamforming_swig.doaesprit_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(doaesprit_sptr self, int i) -> long"""
        return _beamforming_swig.doaesprit_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(doaesprit_sptr self, long max_output_buffer)
        set_max_output_buffer(doaesprit_sptr self, int port, long max_output_buffer)
        """
        return _beamforming_swig.doaesprit_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(doaesprit_sptr self, int i) -> long"""
        return _beamforming_swig.doaesprit_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(doaesprit_sptr self, long min_output_buffer)
        set_min_output_buffer(doaesprit_sptr self, int port, long min_output_buffer)
        """
        return _beamforming_swig.doaesprit_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(doaesprit_sptr self, int which) -> float
        pc_input_buffers_full(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(doaesprit_sptr self, int which) -> float
        pc_input_buffers_full_avg(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(doaesprit_sptr self, int which) -> float
        pc_input_buffers_full_var(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(doaesprit_sptr self, int which) -> float
        pc_output_buffers_full(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(doaesprit_sptr self, int which) -> float
        pc_output_buffers_full_avg(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(doaesprit_sptr self, int which) -> float
        pc_output_buffers_full_var(doaesprit_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.doaesprit_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(doaesprit_sptr self) -> float"""
        return _beamforming_swig.doaesprit_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(doaesprit_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamforming_swig.doaesprit_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(doaesprit_sptr self)"""
        return _beamforming_swig.doaesprit_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(doaesprit_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamforming_swig.doaesprit_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(doaesprit_sptr self) -> int"""
        return _beamforming_swig.doaesprit_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(doaesprit_sptr self) -> int"""
        return _beamforming_swig.doaesprit_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(doaesprit_sptr self, int priority) -> int"""
        return _beamforming_swig.doaesprit_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(doaesprit_sptr self) -> std::string"""
        return _beamforming_swig.doaesprit_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(doaesprit_sptr self) -> std::string"""
        return _beamforming_swig.doaesprit_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(doaesprit_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.doaesprit_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(doaesprit_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.doaesprit_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(doaesprit_sptr self) -> long"""
        return _beamforming_swig.doaesprit_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(doaesprit_sptr self) -> basic_block_sptr"""
        return _beamforming_swig.doaesprit_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(doaesprit_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamforming_swig.doaesprit_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(doaesprit_sptr self) -> std::string"""
        return _beamforming_swig.doaesprit_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(doaesprit_sptr self, std::string name)"""
        return _beamforming_swig.doaesprit_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(doaesprit_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _beamforming_swig.doaesprit_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(doaesprit_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.doaesprit_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(doaesprit_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.doaesprit_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(doaesprit_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _beamforming_swig.doaesprit_sptr_message_subscribers(self, which_port)

# Register doaesprit_sptr in _beamforming_swig:
_beamforming_swig.doaesprit_sptr_swigregister(doaesprit_sptr)


doaesprit_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
doaesprit = doaesprit.make;

class randomsampler(object):
    r"""Proxy of C++ gr::beamforming::randomsampler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "unsigned int", decimation: "unsigned int") -> "gr::beamforming::randomsampler::sptr":
        r"""make(unsigned int vlen, unsigned int decimation) -> randomsampler_sptr"""
        return _beamforming_swig.randomsampler_make(vlen, decimation)
    __swig_destroy__ = _beamforming_swig.delete_randomsampler

# Register randomsampler in _beamforming_swig:
_beamforming_swig.randomsampler_swigregister(randomsampler)

def randomsampler_make(vlen: "unsigned int", decimation: "unsigned int") -> "gr::beamforming::randomsampler::sptr":
    r"""randomsampler_make(unsigned int vlen, unsigned int decimation) -> randomsampler_sptr"""
    return _beamforming_swig.randomsampler_make(vlen, decimation)

class randomsampler_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::beamforming::randomsampler > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(randomsampler_sptr self) -> randomsampler_sptr
        __init__(randomsampler_sptr self, randomsampler p) -> randomsampler_sptr
        """
        _beamforming_swig.randomsampler_sptr_swiginit(self, _beamforming_swig.new_randomsampler_sptr(*args))

    def __deref__(self) -> "gr::beamforming::randomsampler *":
        r"""__deref__(randomsampler_sptr self) -> randomsampler"""
        return _beamforming_swig.randomsampler_sptr___deref__(self)
    __swig_destroy__ = _beamforming_swig.delete_randomsampler_sptr

    def make(self, vlen: "unsigned int", decimation: "unsigned int") -> "gr::beamforming::randomsampler::sptr":
        r"""make(randomsampler_sptr self, unsigned int vlen, unsigned int decimation) -> randomsampler_sptr"""
        return _beamforming_swig.randomsampler_sptr_make(self, vlen, decimation)

    def history(self) -> "unsigned int":
        r"""history(randomsampler_sptr self) -> unsigned int"""
        return _beamforming_swig.randomsampler_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(randomsampler_sptr self, int which, int delay)
        declare_sample_delay(randomsampler_sptr self, unsigned int delay)
        """
        return _beamforming_swig.randomsampler_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(randomsampler_sptr self, int which) -> unsigned int"""
        return _beamforming_swig.randomsampler_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(randomsampler_sptr self, int multiple)"""
        return _beamforming_swig.randomsampler_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(randomsampler_sptr self) -> int"""
        return _beamforming_swig.randomsampler_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(randomsampler_sptr self) -> double"""
        return _beamforming_swig.randomsampler_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(randomsampler_sptr self) -> uint64_t"""
        return _beamforming_swig.randomsampler_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(randomsampler_sptr self) -> uint64_t"""
        return _beamforming_swig.randomsampler_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(randomsampler_sptr self) -> bool"""
        return _beamforming_swig.randomsampler_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(randomsampler_sptr self) -> bool"""
        return _beamforming_swig.randomsampler_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(randomsampler_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamforming_swig.randomsampler_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(randomsampler_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamforming_swig.randomsampler_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(randomsampler_sptr self, std::string level)"""
        return _beamforming_swig.randomsampler_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(randomsampler_sptr self) -> std::string"""
        return _beamforming_swig.randomsampler_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(randomsampler_sptr self) -> int"""
        return _beamforming_swig.randomsampler_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(randomsampler_sptr self, int m)"""
        return _beamforming_swig.randomsampler_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(randomsampler_sptr self)"""
        return _beamforming_swig.randomsampler_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(randomsampler_sptr self) -> bool"""
        return _beamforming_swig.randomsampler_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(randomsampler_sptr self, int m)"""
        return _beamforming_swig.randomsampler_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(randomsampler_sptr self) -> int"""
        return _beamforming_swig.randomsampler_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(randomsampler_sptr self, int i) -> long"""
        return _beamforming_swig.randomsampler_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(randomsampler_sptr self, long max_output_buffer)
        set_max_output_buffer(randomsampler_sptr self, int port, long max_output_buffer)
        """
        return _beamforming_swig.randomsampler_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(randomsampler_sptr self, int i) -> long"""
        return _beamforming_swig.randomsampler_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(randomsampler_sptr self, long min_output_buffer)
        set_min_output_buffer(randomsampler_sptr self, int port, long min_output_buffer)
        """
        return _beamforming_swig.randomsampler_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(randomsampler_sptr self, int which) -> float
        pc_input_buffers_full(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(randomsampler_sptr self, int which) -> float
        pc_input_buffers_full_avg(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(randomsampler_sptr self, int which) -> float
        pc_input_buffers_full_var(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(randomsampler_sptr self, int which) -> float
        pc_output_buffers_full(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(randomsampler_sptr self, int which) -> float
        pc_output_buffers_full_avg(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(randomsampler_sptr self, int which) -> float
        pc_output_buffers_full_var(randomsampler_sptr self) -> pmt_vector_float
        """
        return _beamforming_swig.randomsampler_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(randomsampler_sptr self) -> float"""
        return _beamforming_swig.randomsampler_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(randomsampler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamforming_swig.randomsampler_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(randomsampler_sptr self)"""
        return _beamforming_swig.randomsampler_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(randomsampler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamforming_swig.randomsampler_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(randomsampler_sptr self) -> int"""
        return _beamforming_swig.randomsampler_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(randomsampler_sptr self) -> int"""
        return _beamforming_swig.randomsampler_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(randomsampler_sptr self, int priority) -> int"""
        return _beamforming_swig.randomsampler_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(randomsampler_sptr self) -> std::string"""
        return _beamforming_swig.randomsampler_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(randomsampler_sptr self) -> std::string"""
        return _beamforming_swig.randomsampler_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(randomsampler_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.randomsampler_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(randomsampler_sptr self) -> io_signature_sptr"""
        return _beamforming_swig.randomsampler_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(randomsampler_sptr self) -> long"""
        return _beamforming_swig.randomsampler_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(randomsampler_sptr self) -> basic_block_sptr"""
        return _beamforming_swig.randomsampler_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(randomsampler_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamforming_swig.randomsampler_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(randomsampler_sptr self) -> std::string"""
        return _beamforming_swig.randomsampler_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(randomsampler_sptr self, std::string name)"""
        return _beamforming_swig.randomsampler_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(randomsampler_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _beamforming_swig.randomsampler_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(randomsampler_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.randomsampler_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(randomsampler_sptr self) -> swig_pmt_ptr"""
        return _beamforming_swig.randomsampler_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(randomsampler_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _beamforming_swig.randomsampler_sptr_message_subscribers(self, which_port)

# Register randomsampler_sptr in _beamforming_swig:
_beamforming_swig.randomsampler_sptr_swigregister(randomsampler_sptr)


randomsampler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randomsampler = randomsampler.make;



